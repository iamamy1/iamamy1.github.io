(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{410:function(t,s,a){"use strict";a.r(s);var n=a(46),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表"}},[t._v("#")]),t._v(" 列表")]),t._v(" "),a("h2",{attrs:{id:"定义和获取元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义和获取元素"}},[t._v("#")]),t._v(" 定义和获取元素")]),t._v(" "),a("p",[t._v("List表：作用类似于其他语言的数组。\t数组：数字的组合\t字母的组合\t字符串的组合")]),t._v(" "),a("p",[a("strong",[t._v("列表：[  ]")])]),t._v(" "),a("p",[a("strong",[t._v("声明：")])]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("names "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ncomputer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("strong",[t._v("地址：")]),t._v(" 即使是空列表也分配地址")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("computer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("strong",[t._v("元素获取使用：")]),t._v(" 下标\t索引")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("strong",[t._v("符号：")])]),t._v(" "),a("p",[a("strong",[t._v("+：")]),t._v(" 合并\t[  ] + [  ]")]),t._v(" "),a("p",[a("strong",[t._v("*：")]),t._v(" [  ] * n")]),t._v(" "),a("p",[a("strong",[t._v("in：")]),t._v(" a  in  [  ]  False  True")]),t._v(" "),a("p",[a("strong",[t._v("not  in：")])]),t._v(" "),a("p",[a("strong",[t._v("is：")]),t._v(" 地址是否相等")]),t._v(" "),a("p",[a("strong",[t._v("not  is：")])]),t._v(" "),a("h2",{attrs:{id:"更新和删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新和删除"}},[t._v("#")]),t._v(" 更新和删除")]),t._v(" "),a("p",[a("strong",[t._v("更新：")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("使用下标找到对应元素的位置")])]),t._v(" "),a("li",[a("p",[t._v("通过=赋值")])]),t._v(" "),a("li",[a("p",[t._v("新的值覆盖原来的值")])])]),t._v(" "),a("p",[a("strong",[t._v("删除：del")]),t._v("  （是 delete 的缩写）")]),t._v(" "),a("p",[a("strong",[t._v("补充：")])]),t._v(" "),a("p",[t._v("==\t比较的是内容")]),t._v(" "),a("p",[t._v("in\t表示相等或者包含\t可以应用在字符串的判断中\t也可以用在列表")]),t._v(" "),a("h2",{attrs:{id:"列表切片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表切片"}},[t._v("#")]),t._v(" 列表切片")]),t._v(" "),a("p",[a("strong",[t._v("[头下标 : 尾下标 : 步长]")])]),t._v(" "),a("p",[t._v("列表切片与字符串切片类似，列表也是支持切片的，将截取的结果再次保存在一个新的列表中")]),t._v(" "),a("h2",{attrs:{id:"列表排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表排序"}},[t._v("#")]),t._v(" 列表排序")]),t._v(" "),a("p",[a("strong",[t._v("sorted(iterable, cmp=None, key=None, reverse=False)")]),t._v(" 排序，默认是升序")]),t._v(" "),a("ul",[a("li",[t._v("iterable -- 可迭代对象。")]),t._v(" "),a("li",[t._v("cmp -- 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。")]),t._v(" "),a("li",[t._v("key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。")]),t._v(" "),a("li",[t._v("reverse -- 排序规则，"),a("strong",[t._v("reverse = True 降序 ， reverse = False 升序（默认）")])])]),t._v(" "),a("p",[a("strong",[t._v("嵌套列表")]),t._v("：列表中的元素可以是各种数据类型，也可以是列表，嵌套列表类似多维数组")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# list()：将指定内容转成列表 强制类型转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1, 4, 7]")]),t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),t._v("\nresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ['a', 'b', 'c']")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"列表函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表函数"}},[t._v("#")]),t._v(" 列表函数")]),t._v(" "),a("h3",{attrs:{id:"添加"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加"}},[t._v("#")]),t._v(" 添加")]),t._v(" "),a("p",[a("strong",[t._v("list.append(obj)")]),t._v("：用于在列表末尾添加新的对象")]),t._v(" "),a("p",[a("strong",[t._v("list.extend(seq)")]),t._v("：用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）类似列表的合并")]),t._v(" "),a("p",[a("strong",[t._v("符号 +")]),t._v("\t将两个列表合并为一个")]),t._v(" "),a("p",[a("strong",[t._v("list.insert(index, obj)")]),t._v("：用于将指定对象插入列表的指定位置")]),t._v(" "),a("h3",{attrs:{id:"删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),a("p",[a("strong",[t._v("del list[ index ]：")])]),t._v(" "),a("p",[a("strong",[t._v("remove( e )：")]),t._v(" 删除列表中第一次出现的元素e，返回值是None。如果没有找到要删除的元素，则报出异常。")]),t._v(" "),a("p",[a("strong",[t._v("pop( )：")]),t._v(" 弹栈，移除列表中的最后一个元素，返回值是删除的那个元素。")]),t._v(" "),a("p",[a("strong",[t._v("clear( )：")]),t._v(" 清除列表（里面的所有元素全部删除）")]),t._v(" "),a("h3",{attrs:{id:"翻转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#翻转"}},[t._v("#")]),t._v(" 翻转")]),t._v(" "),a("p",[a("strong",[t._v("reverse( )")]),t._v("：将列表中元素翻转")]),t._v(" "),a("h3",{attrs:{id:"排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),a("p",[a("strong",[t._v("sorted(list， reverse=True)")]),t._v("：reverse = True 降序 ， reverse = False 升序，默认升序。")]),t._v(" "),a("p",[a("strong",[t._v("list.sort( reverse = True)")]),t._v("：reverse = True 降序 ， reverse = False 升序，默认升序。")]),t._v(" "),a("p",[t._v("两种排序方式，二者一样")]),t._v(" "),a("h3",{attrs:{id:"次数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#次数"}},[t._v("#")]),t._v(" 次数")]),t._v(" "),a("p",[a("strong",[t._v("list.count(obj)")]),t._v("：用于统计某个元素在列表中出现的次数")]),t._v(" "),a("h3",{attrs:{id:"最大最小值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最大最小值"}},[t._v("#")]),t._v(" 最大最小值")]),t._v(" "),a("p",[a("strong",[t._v("max( )")]),t._v("\t最大值")]),t._v(" "),a("p",[a("strong",[t._v("min( )")]),t._v("\t最小值")]),t._v(" "),a("h3",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),a("p",[a("strong",[t._v("enumerate(sequence, [start=0])")]),t._v("：用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。返回 enumerate(枚举) 对象。")]),t._v(" "),a("ul",[a("li",[t._v("sequence -- 一个序列、迭代器或其他支持迭代对象。")]),t._v(" "),a("li",[t._v("start -- 下标起始位置。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);
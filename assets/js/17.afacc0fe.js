(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{389:function(e,t,i){"use strict";i.r(t);var a=i(46),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"traditional-methods-for-machine-learning-in-graphs"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#traditional-methods-for-machine-learning-in-graphs"}},[e._v("#")]),e._v(" Traditional Methods for Machine Learning in Graphs")]),e._v(" "),i("p",[i("em",[e._v("input graph  →  structured features  →  learning algorithm  →  prediction")])]),e._v(" "),i("h2",{attrs:{id:"_2-1-machine-learning-tasks"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-machine-learning-tasks"}},[e._v("#")]),e._v(" 2.1 Machine Learning Tasks")]),e._v(" "),i("ul",[i("li",[e._v("Node-level prediction")]),e._v(" "),i("li",[e._v("Link-level prediction")]),e._v(" "),i("li",[e._v("Graph-level prediction")])]),e._v(" "),i("h2",{attrs:{id:"_2-2-traditional-ml-pipeline"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-traditional-ml-pipeline"}},[e._v("#")]),e._v(" 2.2 Traditional ML Pipeline")]),e._v(" "),i("ul",[i("li",[e._v("Hard-crafted feature + Train an ML model")]),e._v(" "),i("li",[e._v("Apply the model")])]),e._v(" "),i("h2",{attrs:{id:"_2-3-feature-design-hard-crafted-feature"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-feature-design-hard-crafted-feature"}},[e._v("#")]),e._v(" 2.3 Feature Design(Hard-crafted feature)")]),e._v(" "),i("h3",{attrs:{id:"_2-3-1-node-level-tasks-node-classification"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-node-level-tasks-node-classification"}},[e._v("#")]),e._v(" 2.3.1 Node-Level Tasks: Node classification")]),e._v(" "),i("p",[i("strong",[e._v("Node degree")])]),e._v(" "),i("ul",[i("li",[e._v("The degree of node is the number of edges (neighboring nodes) the node has.")]),e._v(" "),i("li",[e._v("Treats all neighboring nodes equally.")])]),e._v(" "),i("p",[i("strong",[e._v("Node centrality")])]),e._v(" "),i("ul",[i("li",[e._v("Node centrality takes the node importance in a graph into account.")]),e._v(" "),i("li",[e._v("Different ways to model importance\n"),i("ol",[i("li",[e._v("Eigenvector centrality")]),e._v(" "),i("li",[e._v("Betweenness centrality")]),e._v(" "),i("li",[e._v("Closeness centrality")])])])]),e._v(" "),i("p",[i("strong",[e._v("Clustering coefficient")])]),e._v(" "),i("ul",[i("li",[e._v("Measures how connected neighboring nodes are")])]),e._v(" "),i("p",[i("strong",[e._v("Graphlet degree vector")])]),e._v(" "),i("ul",[i("li",[e._v("Counts the occurrences of different graphlets")])]),e._v(" "),i("p",[i("strong",[e._v("Categorization")])]),e._v(" "),i("ul",[i("li",[i("p",[e._v("Importance-based features:")]),e._v(" "),i("ol",[i("li",[e._v("Node degree")]),e._v(" "),i("li",[e._v("Node centrality")])]),e._v(" "),i("p",[e._v("Useful for predicting influential nodes in a graph")]),e._v(" "),i("p",[e._v("Example: predicting celebrity users in a social network")])]),e._v(" "),i("li",[i("p",[e._v("Structure-based features:")]),e._v(" "),i("ol",[i("li",[e._v("Node degree")]),e._v(" "),i("li",[e._v("Clustering coefficient")]),e._v(" "),i("li",[e._v("Graphlet count vector")])]),e._v(" "),i("p",[e._v("Useful for predicting a particular role a node plays in a graph")]),e._v(" "),i("p",[e._v("Example: Predicting protein functionality in a protein-protein interaction network")])])]),e._v(" "),i("h3",{attrs:{id:"_2-3-2-link-level-prediction-task"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-link-level-prediction-task"}},[e._v("#")]),e._v(" 2.3.2 Link-Level Prediction Task")]),e._v(" "),i("p",[i("strong",[e._v("Two formulations of the link prediction task")])]),e._v(" "),i("ul",[i("li",[e._v("Links missing at random")]),e._v(" "),i("li",[e._v("Links over time")])]),e._v(" "),i("p",[i("strong",[e._v("Link Prediction via Proximity（Methodology）")])]),e._v(" "),i("ul",[i("li",[e._v("For each pair of nodes "),i("em",[e._v("(x,y)")]),e._v(" compute score "),i("em",[e._v("c(x,y)")])]),e._v(" "),i("li",[e._v("Sort pairs "),i("em",[e._v("(x,y)")]),e._v(" by the decreasing score "),i("em",[e._v("c(x,y)")])]),e._v(" "),i("li",[e._v("Predict top n pairs as new links")]),e._v(" "),i("li",[e._v("See which of these links actually appear in G[t1, t1']")])]),e._v(" "),i("p",[i("strong",[e._v("Distance-based feature")])]),e._v(" "),i("ul",[i("li",[e._v("Shortest-path distance between two nodes.")]),e._v(" "),i("li",[e._v("Does not capture how neighborhood overlaps.")])]),e._v(" "),i("p",[i("strong",[e._v("Local neighborhood overlap")])]),e._v(" "),i("ul",[i("li",[e._v("Captures how many neighboring nodes are shared by two nodes.")]),e._v(" "),i("li",[e._v("Metric is always zero if the two nodes do not have any neighbors in common. However, the two nodes may still potentially be connected in the future.")])]),e._v(" "),i("ol",[i("li",[i("p",[e._v("Common neighbors\n$$\n|N(v_1)∩N(v_2)|\n$$")])]),e._v(" "),i("li",[i("p",[e._v("Jaccard’s coefficient\n$$\n\\frac{|N(v_1)∩ N(v_2)|}{|N(v_1)∪N(v_2)|}\n$$")])]),e._v(" "),i("li",[i("p",[e._v("Adamic-Adar index\n$$\n∑_{u∈N(v_1)∩N(v_2)}\\frac{1}{log(k_u)}\n$$")])])]),e._v(" "),i("p",[i("strong",[e._v("Global neighborhood overlap")])]),e._v(" "),i("ul",[i("li",[e._v("Uses global graph structure to score two nodes")]),e._v(" "),i("li",[e._v("Resolve Local neighborhood overlap's limitation")])]),e._v(" "),i("ol",[i("li",[e._v("Katz index: count the number of paths of all lengths between a given pair of nodes. Use powers of the graph adjacency matrix.")])]),e._v(" "),i("h3",{attrs:{id:"_2-3-3-glaph-level-features"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-glaph-level-features"}},[e._v("#")]),e._v(" 2.3.3 Glaph-Level Features")]),e._v(" "),i("p",[i("strong",[e._v("Graphlet Kernel")]),e._v(" : Measure similarity between two graphs")]),e._v(" "),i("ul",[i("li",[e._v("Graph is represented as Bag-of-graphlet")]),e._v(" "),i("li",[e._v("Computationally expensive")])]),e._v(" "),i("p",[i("strong",[e._v("Weisfeiler-Lehman Kernel")])]),e._v(" "),i("ul",[i("li",[e._v("Apply K-step color refinement algorithm to enrich node colors")]),e._v(" "),i("li",[e._v("Graph is represented as Bag-of-colors")]),e._v(" "),i("li",[e._v("Computationally efficient")]),e._v(" "),i("li",[e._v("Closely related to Graph Neural Networks")])])])}),[],!1,null,null,null);t.default=r.exports}}]);